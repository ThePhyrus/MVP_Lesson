На этом уроке
1. Разберём основной шаблон проектирования — MVP.
Оглавление
Введение
View Binding
Архитектура кода
MVP
Практика
Дополнительные материалы
Практическое задание
Введение
За время обучения и самостоятельных исследований нами написано некоторое количество кода и
простых приложений. Мы создавали Activity, где объявляли view, находили их в лейауте и работали с
ними. Всё разрабатывалось внутри Activity или фрагмента. Некоторые называют такой способ
«спагетти-кодом» или «лапшой».
В таком виде код трудно поддерживать, если проект растёт или развивается. Код сложно тестировать
или добавлять в него новые функции, работать с ним в долгосрочной перспективе.
Работа над «боевыми» проектами в команде, где больше одного человека, ухудшит положение. В
«спагетти» сложно разбираться, если его писал кто-то другой. Коллеги нас определённо не похвалят,
разбираясь в миллионах строк перемешанного кода.
View Binding
Прежде чем перейти к изучению архитектуры, надо рассмотреть библиотеку, позволяющую удобно
работать с лейаутом. Она потребуется с самого начала и на протяжении всего курса. Библиотека
называется View Binding и позволяет избавиться от необходимости вызова findViewById вручную. У
библиотеки есть и другие возможности, которые останутся на самостоятельное изучение. Чтобы
начать работать с View Binding, подключим его к build.gradle модуля приложения:
android {
...
buildFeatures {
viewBinding true
© geekbrains.ru 1
}
...
}
Предположим, что у нас есть такой лейаут в файле activity_main.xml:
<LinearLayout ... >
<TextView ... android:id="@+id/name" />
<Button ... android:id="@+id/button" />
</LinearLayout>
Тогда после включения View Binding в build.gradle автоматически сгенерируется класс
ActivityMainBinding, соответствующий названию файла activity_main.xml. Название сгенерированного
класса — это переведённое в СamelCase название файла с добавлением слова Binding в конце.
Воспользуемся получившемся классом и инициализируем его в onCreate:
private var vb: ActivityMainBinding? = null
override fun onCreate(savedInstanceState: Bundle?) {
super.onCreate(savedInstanceState)
vb = ActivityMainBinding.inflate(layoutInflater)
setContentView(vb?.root)
}
Теперь получим доступ к элементам лейаута через vb:
vb?.name.text = ...
vb?.button.setOnClickListener { ... }
Другие примеры применения View Binding — далее в курсе.
Архитектура кода
Против некачественного или неструктурированного кода применяется рефакторинг. Но лучше писать
хорошо с самого начала.
Мы знаем, что написание качественного программного обеспечения — сложное и многогранное
занятие. Задача программы — не только соответствовать установленным требованиям, но и быть
надёжной, удобной в сопровождении, тестируемой и достаточно гибкой для добавления или
© geekbrains.ru 2
изменения функций. И здесь появляется понятие стройной архитектуры. Стройная архитектура
реализует следующие системы:
● независимые от фреймворков;
● тестируемые;
● независимые от UI;
● независимые от БД;
● независимые от любой внешней службы.
Для разработки подобной архитектуры применяются различные шаблоны проектирования.
На курсе мы воспользуемся одним из них — паттерном MVP. Однако стоит ознакомиться и с другими
паттернами, например, MVVM и MVI — у каждого из них своё применение, преимущества и
недостатки.
MVP
MVP (Model-View-Presenter) предоставляет возможность выделить весь низкоуровневый Android-код.
Такой код требуется для отображения интерфейса и взаимодействия с ним, в представление. Более
высокоуровневая бизнес-логика отправляется в презентер.
Для этого активити или фрагмент рассматривается как слой представления. Далее разрабатывается
отдельный класс — легковесный презентер, который контролирует представление. Главное —
определить ответственность каждого слоя и стандартизировать интерфейс между ними.
Общее описание возможного разделения
1. Представление (активити или фрагмент):
a. Создание экземпляра презентера и механизма его присоединения или отсоединения.
b. Оповещение презентера о важных для него событиях жизненного цикла.
c. Сообщение презентеру о входных событиях.
d. Анимации.
e. Отслеживание событий.
f. Переход на другие экраны.
2. Презентер:
a. Загрузка моделей.
© geekbrains.ru 3
b. Сохранение ссылки на модель и состояния представления.
c. Форматирование отображаемого на экране и указание представлению отобразить это.
d. Взаимодействие с репозиториями (база данных, сеть и т. д.), если они используются —
Clean Architecture.
e. Определение действий после получения входных событий от представления.
3. Модель отвечает за всё, что напрямую связано с данными:
a. Получение, например, по сети.
b. Хранение, например, в БД.
c. Преобразование, например, из формата, получаемого по сети, в формат,
используемый бизнес-логикой приложения.
Если наш код презентера содержит код Android-фреймворка, вероятно, мы что-то делаем неверно.
Соответственно, если наши представления нуждаются в ссылке на модель, это также указывает на
нарушения.
При реализации MVP представление взаимодействует напрямую с презентером через вызов
соответствующих функций или событий экземпляра презентера. А презентер взаимодействует с View
путём специального интерфейса, реализованного представлением.
Все события представления передаются для обработки в презентер и практически никогда не
обрабатываются логикой представления. Говоря проще, View должна быть максимально «глупой»,
просто сообщая презентеру, что в ней происходит, и принимая от презентера простые команды. В
простейшем виде MVP представляется так:
© geekbrains.ru 4
Это не так просто для понимания и особенно для исполнения. Количество кода увеличивается кратно.
Однако преимущества подхода очевидны. Функциональные модули развязаны — разделение
ответственности модулей, где каждый отвечает за свою часть. В этом случае над проектом работает
команда разработчиков — каждый из них разрабатывает свою часть приложения: view, presenter или
model.
Такое приложение легко поддерживать, обслуживать, расширять и тестировать. В классах содержится
меньше кода. Соответственно, код становится чище, он легче читается, и мы получаем меньше
ошибок.
Простейший пример реализации паттерна MVP:
1. Model:
class Model() {
fun getGreeting(): String {
...
return "Hello!"
}
}
2. View:
interface GreetingView {
fun setGreeting(greeting: String)
}
© geekbrains.ru 5
3. Presenter:
class Presenter() {
var view: GreetingView? = null
fun attach(view: GreetingView){
this.view = view
}
fun buttonClick(){
view?.let{
val.greeting = model.getGreeting()
it.setGreeting(greeting)
}
}
}
4. Activity:
class MainActivity : AppCompatActivity(), GreetingView {
val presenter = Presenter(Model())
private var vb: ActivityMainBinding? = null
override fun onCreate(savedInstanceState: Bundle?){
super.onCreate(savedInstanceState)
...
vb?.button.setOnClickListener { presenter.buttonClicked() }
}
override fun setGreeting(greeting: String){
vb?.tvGreeting.text = greeting
}
}
Для сравнения и большей полноты картины несколько слов о другом паттерне — MVVM. МVVM и MVP
похожи. Их основное отличие — способ взаимодействия с View.
В MVVM место презентера занимает ViewModel, и нет интерфейса View. Вместо вызова функций
интерфейса View, как в случае с презентером в MVP, ViewModel в MVVM предоставляет наружу
коллбэки. Коллбэки сообщают View об изменениях, которые требуется как-то отобразить. Это могут
быть как обычные слушатели вроде OnClickListener, так и более сложные решения — LiveData или
источники RxJava.
Таким образом, у ViewModel нет ссылки на View, в отличие от Presenter в MVP. Это в некотором
смысле преимущество паттерна перед MVP в силу усиления разделения слоёв. Однако у MVVM, если
говорить именно об Android, есть и недостатки, основные из которых — проблема двойственности и
© geekbrains.ru 6
проблема состояний. Подробнее о них — в статье «Как перестать использовать MVVM». Есть
полезная информация и в комментариях к ней.
Практика
Начнём с постановки задачи. Чтобы попрактиковаться, возьмём что-то очень простое. Например,
напишем приложение с единственным экраном, куда поместим три кнопки. Текстом на каждой кнопке
отобразится, сколько раз по ней кликнули. Сверстаем простейший макет:
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:app="http://schemas.android.com/apk/res-auto"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:gravity="center_horizontal"
android:padding="16dp">
<TextView
android:id="@+id/tv_1"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="@string/counter_one"/>
<Button
android:id="@+id/btn_counter1"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
app:layout_constraintTop_toBottomOf="@id/tv_1"
android:text="0" />
<TextView
android:id="@+id/tv_2"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
app:layout_constraintTop_toBottomOf="@id/btn_counter1"
android:text="@string/counter_two" />
<Button
android:id="@+id/btn_counter2"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
app:layout_constraintTop_toBottomOf="@id/tv_2"
android:text="0" />
<TextView
android:id="@+id/tv_3"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
app:layout_constraintTop_toBottomOf="@id/btn_counter2"
android:text="@string/counter_three" />
© geekbrains.ru 7
<Button
android:id="@+id/btn_counter3"
android:layout_width="wrap_content"
android:layout_height="wrap_content"
app:layout_constraintTop_toBottomOf="@id/tv_3"
android:text="0" />
</LinearLayout>
Это выглядит следующим образом:
В макете используются следующие строки:
<string name="app_name">Popular Libraries</string>
<string name="counter_one">Счетчик 1</string>
<string name="counter_two">Счетчик 2</string>
<string name="counter_three">Счетчик 3</string>
© geekbrains.ru 8
Для наглядности перед построением MVP напишем весь код так, как его напишет незнакомый с
архитектурными паттернами человек — в виде «спагетти» прямо в MainActivity:
class MainActivity : AppCompatActivity() {
private var vb: ActivityMainBinding? = null
val counters = mutableListOf(0, 0, 0)
override fun onCreate(savedInstanceState: Bundle?) {
super.onCreate(savedInstanceState)
vb = ActivityMainBinding.inflate(layoutInflater)
setContentView(vb?.root)
vb?.btnCounter1?.setOnClickListener {
vb?.btnCounter1?.text = (++counters[0]).toString()
}
vb?.btnCounter2?.setOnClickListener {
vb?.btnCounter2?.text = (++counters[1]).toString()
}
vb?.btnCounter3?.setOnClickListener {
vb?.btnCounter3?.text = (++counters[2]).toString()
}
initViews()
}
fun initViews() {
vb?.btnCounter1?.text = counters[0].toString()
vb?.btnCounter2?.text = counters[1].toString()
vb?.btnCounter3?.text = counters[2].toString()
}
override fun onSaveInstanceState(outState: Bundle) {
super.onSaveInstanceState(outState)
outState.putIntArray("counters", counters.toIntArray())
}
override fun onSaveInstanceState(outState: Bundle, outPersistentState:
PersistableBundle) {
super.onSaveInstanceState(outState, outPersistentState)
outState.putIntArray("counters", counters.toIntArray())
}
override fun onRestoreInstanceState(savedInstanceState: Bundle) {
super.onRestoreInstanceState(savedInstanceState)
val countersArray = savedInstanceState.getIntArray("counters")
countersArray?.toList()?.let {
counters.clear()
counters.addAll(it)
}
© geekbrains.ru 9
initViews()
}
}
Ничего сложного:
1. В списке, сохраняющем нажатия, при клике на каждую кнопку увеличиваем значение по
соответствующему индексу.
2. Для сохранения состояния при повороте экрана используем savedInstanceState.
Мы выполнили задачу — счётчики считают нажатия.
Теперь разберём всё на слои и реализуем MVP. Для начала найдём модель, логику и представление.
1. Модель — это информация о данных, а данные у нас здесь:
val counters = mutableListOf(0, 0, 0)
2. Теперь найдём логику. У нас она заключается в увеличении счётчика и в текущем виде
распределяется по представлению:
vb?.btnCounter1?.setOnClickListener {
vb?.btnCounter1?.text = (++counters[0]).toString()
}
vb?.btnCounter2?.setOnClickListener {
vb?.btnCounter2?.text = (++counters[1]).toString()
}
vb?.btnCounter3?.setOnClickListener {
vb?.btnCounter3?.text = (++counters[2]).toString()
}
3. Остальное относится к слою View. Разделим и разложим всё это по полочкам. Начнём снова с
модели:
class CountersModel {
val counters = mutableListOf(0, 0, 0)
fun getCurrent(index: Int): Int {
return counters[index]
}
fun next(index: Int): Int {
© geekbrains.ru 10
counters[index]++
return getCurrent(index)
}
fun set(index: Int, value: Int){
counters[index] = value
}
}
Список для хранения счётчиков, методы получения текущего и следующего, а также метод
установки значения по индексу — этого более чем достаточно.
4. Теперь для удобства поработаем с интерфейсом представления. View должна быть
максимально «глупой», а это значит, что все её активные действия сводятся к сообщению
презентеру о нажатии и установке текста кнопкам. Кнопки пока будем отличать по индексу (это
неправильно):
interface MainView {
fun setButtonText(index: Int, text: String)
}
5. Далее разберёмся с логикой, вытащим её в презентер:
class MainPresenter(val view: MainView) {
val model = CountersModel()
//Архитектурная ошибка. В качестве практического задания -- исправить
fun counterClick(id: Int){
when(id){
R.id.btn_counter1 -> {
val nextValue = model.next(0)
view.setButtonText(0, nextValue.toString())
}
R.id.btn_counter2 -> {
val nextValue = model.next(1)
view.setButtonText(1, nextValue.toString())
}
R.id.btn_counter3 -> {
val nextValue = model.next(2)
view.setButtonText(2, nextValue.toString())
}
}
}
}
© geekbrains.ru 11
6. Формируем ссылку на модель и метод для вызова из View при клике на кнопку, куда отдаётся
id, и где происходит вся логика. Для этого получаем у модели следующее значение по индексу
и командуем view об установке текста соответствующей кнопке. Как уже упоминалось,
относительно view подобная работа с кнопками по индексам считается неправильной. Однако
это часть специально заложенной архитектурной ошибки, о которой говорит комментарий в
презентере.
В чём ошибка: в презентере упоминается класс R, относящийся к AndroidSDK, но быть его
здесь не должно. Исправление этой ошибки будет практическим заданием к уроку.
7. Далее поправим MainActivity, чтобы он реализовывал интерфейс MainView, и уберём из него
всё лишнее:
class MainActivity : AppCompatActivity(), MainView {
private var vb: ActivityMainBinding? = null
val presenter = MainPresenter(this)
override fun onCreate(savedInstanceState: Bundle?) {
super.onCreate(savedInstanceState)
vb = ActivityMainBinding.inflate(layoutInflater)
setContentView(vb?.root)
val listener = View.OnClickListener {
presenter.counterClick(it.id)
}
vb?.btnCounter1?.setOnClickListener(listener)
vb?.btnCounter2?.setOnClickListener(listener)
vb?.btnCounter3?.setOnClickListener(listener)
}
//Подсказка к ПЗ: поделить на 3 отдельные функции и избавиться от index
override fun setButtonText(index: Int, text: String) {
when(index){
0 -> vb?.btnCounter1?.text = text
1 -> vb?.btnCounter2?.text = text
2 -> vb?.btnCounter3?.text = text
}
}
}
Теперь View занимается только тем, что требуется нам. Она не знает ничего о логике и данных.
Задача выполнена. Однако код, отвечающий за сохранение состояния, куда-то пропал. Дело в том,
что в таком виде организовать сохранение состояния без нарушения паттерна MVP крайне сложно.
Это потребовало бы написания довольно объёмного кода. Но есть изящное решение проблемы
сохранения состояния, о котором мы поговорим на следующем уроке.
© geekbrains.ru 12
Дополнительные материалы
1. Статья «Расширяемый код Android-приложений с MVP».
2. Статья «Паттерны разработки».
3. Статья View Binding.
Практическое задание
В проекте урока есть серьёзная неточность, что делает презентер нетестируемым: ссылки на
Android-фреймворк. В методе buttonClick используются конструкции типа R.id.btnCounter1, которых не
должно быть в презентере. Переделайте код этого метода, а также вызывающего метода
представления так, чтобы в презентере остался только чистый Kotlin-код.