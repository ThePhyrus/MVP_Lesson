Lesson_3_RxJava_1_TimeCode


00:10 - Начало + презентация
00:14 - Основные сущности
00:15 - Переходим к кодингу
00:17 - Разница в понятии слова "поток"
00:18 - Банальнейший пример, как вообще можно пользоваться RxJava
00:19 - Что такое emitter (у него есть три основных метода и он отвечает за взаимодействие с Observable)
00:22 - Сделали свой первый Observable, который будет эмиттить целый лист. Теперь надо на эти данные реагировать (обрабатывать)
00:23 - Реагируем на данные (но в прмере делаем так, как обычно не делают)
00:26 - Смотрим, как это работает (ЗАПОМНИТЬ ЭТОТ ПРИМЕР!!!)
00:27 - Observable.just - узнали, что такое есть и фсё
00:29 - Observable.fromIterable()
00:33 - Observable.interval() - что-то не захотел работать
00:35 - Observable.range()
00:36 - Observable.fromCallable() - довольно редкий метод (подходит для адаптпации старого кода)
00:40 - Операторы Observable:
00:40 - .take
00:41 - .skip
00:42 - .map {} - самый главный оператор
00:49 - .distinct & .distinctUntilChanged() - очень классный, надо запомнить (убирает повторения & последовательные повторения)
00:51 - .filter {}
00:53 - Работа с разными потоками (тема сложная и важная!)
00:56 - .zip()
01:00 - .mergeWith()
01:01 - .flapMap() - один из самых главных в плане изменения самого потока данных (не путать с Thread)
01:08 - .delay() - с ним поаккуратней, он меняет Thread (или может менять... Аккуратней и фсё) помогает это .observeOn(AndroidSchedulers.chooseThread())
01:13 - про 2 важных аналога .flapMap() (concatMap() & swithcMap()) нужно почитать самостоятельно. Хотя, можно было и рассказать
01:16 - .observeOn()
01:19 - Обязательно! 100% НУЖНО!!! Посмотреть аналоги Observable (Single.create(), Maybe.create(), Complitable.create()) Надо запомнить, надо знать.
01:21 - Flowable.create() - у него есть механизм BackpressureStrategy, чтобы справляться с высоконагруженным потоком
01:24 - subscribeOn() & .observeOn() для работы с Threads (эту связку я буду видеть в 99% случаев в работе)
01:30 - "Секретная" штука - Экстеншн-функция для такой связки (упрощает работу с ней)
01:32 - .disposable() -  !!!очень важная штука!!!
01:32 - .disposable() -  !!!очень важная штука!!!
01:32 - .disposable() -  !!!очень важная штука!!!
01:32 - .disposable() -  !!!очень важная штука!!!
01:36 - Тоже очень важная штука, которая используется всегда и постоянно (фун-рас для работы с .disposable())
01:39 - Вопросы и ответы...
01:40 - Зачем всё это? Почему не использовать просто Thread
01:43 - Про домашку к этому уроку
01:54 - Фсё
